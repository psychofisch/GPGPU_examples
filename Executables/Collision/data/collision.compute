#version 440

layout (std140, binding = 0) buffer MinMaxBuffer{
	vec4 minMaxBuffer[];//vec3 does not work properly -> https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)
};

layout(std430, binding = 1) buffer CollisionBuffer {
	int collisionBuffer[];
};

uniform int numberOfBoxes;

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;
void main(){
	uint index = gl_GlobalInvocationID.x;

	if(index >= numberOfBoxes)
		return;

	vec3 currentMin = minMaxBuffer[(index * 2u)].xyz; //min
	vec3 currentMax = minMaxBuffer[(index * 2u) + 1u].xyz; //max
	int result = -1;

	for (int j = 0; j < numberOfBoxes; j++)
	{
		if (index == j)
			continue;
		//int cnt = 0;
		vec3 otherMin = minMaxBuffer[j * 2].xyz;
		vec3 otherMax = minMaxBuffer[(j * 2) + 1].xyz;

		int p = 0;
		for (p = 0; p <= 3; p++)
		{
			if ((otherMin[p] < currentMax[p] && otherMin[p] > currentMin[p])
				|| (otherMax[p] < currentMax[p] && otherMax[p] > currentMin[p])
				|| (otherMax[p] > currentMax[p] && otherMin[p] < currentMin[p])
				|| (otherMax[p] < currentMax[p] && otherMin[p] > currentMin[p])) // TODO: optimize this
			{
				continue;
			}
			else
			{
				break;
			}
		}

		if (p >= 3)
		{
			result = j;
			break;// OPT: do not delete this (30% performance loss)
		}
	}

	collisionBuffer[index] = result;
}
