/*

FluidParticles inspired by https://knork.org/doubleRelaxation.html

*/

#version 440

layout (std140, binding = 0) buffer PositionBuffer{
	vec4 positionBuffer[];
};

layout (std140, binding = 1) buffer PositionOutBuffer{
	vec4 positionOutBuffer[];
};

layout (std140, binding = 2) buffer VelocityBuffer{
	vec4 velocityBuffer[];
};

uniform float dt;
uniform float interactionRadius;
uniform vec3 gravity;
uniform int numberOfParticles;
uniform vec3 mDimension;

vec4 calculatePressure(uint index);
mat2x3 applyViscosity(uint index, vec3 velocity);

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;
void main(){
	uint index = gl_GlobalInvocationID.x;
	
	if(index >= numberOfParticles)
		return;
	
	// positionOutBuffer[index] = positionBuffer[index];
	// velocityBuffer[index] = calculatePressure(index);
	vec3 particlePosition = positionBuffer[index].xyz;
	vec3 particleVelocity = velocityBuffer[index].xyz;
	//vec4 particlePressure = calculatePressure(index);
	// vec3 particlePressure = vec3(0,0,0);
	
	// gravity
	if (   particlePosition.x <= mDimension.x || particlePosition.x >= 0.f
		|| particlePosition.y <= mDimension.y || particlePosition.y >= 0.f
		|| particlePosition.z <= mDimension.z || particlePosition.z >= 0.f)
		//particleVelocity += (gravity + particlePressure.xyz) * dt;
		particleVelocity += (gravity) * dt;
	// ***g

	// fluid simulation
	mat2x3 fl = applyViscosity(index, particleVelocity);
	particlePosition = fl[0];
	particleVelocity = fl[1];
	//particleVelocity += calculatePressure(index).xyz * dt;
	// *** fs

	// static collision
	for (int i = 0; i < 3; ++i)
	{
		if ((particlePosition[i] + particleVelocity[i] * dt > mDimension[i] && particleVelocity[i] > 0.f) || (particlePosition[i] + particleVelocity[i] * dt < 0.f && particleVelocity[i] < 0.f))
		{
			particleVelocity[i] *= -.3f;
		}
	}
	// *** sc

	//particleVelocity -= dt * particleVelocity * 0.1f;//damping
	particlePosition += particleVelocity * dt;

	positionOutBuffer[index] = vec4(particlePosition, index);
	velocityBuffer[index] = vec4(particleVelocity, numberOfParticles);
	//velocityBuffer[index] = particlePressure;
}

vec4 calculatePressure(uint index)
{
	//float interactionRadius = 18.f;
	float amplitude = 1.0f;
	vec3 particlePosition = positionBuffer[index].xyz;
	
	vec4 pressureVec = vec4(0.f, 0.f, 0.f, 0.f);
	for (int i = 0; i < numberOfParticles; i++)
	{
		if (index == i)
			continue;

		vec3 dirVec = particlePosition - positionBuffer[i].xyz;
		float dist = length(dirVec);

		//if (dist > interactionRadius * 1.0f || dist < 0.01f)
		if (dist > interactionRadius * 1.0f)
			continue;

		float pressure = 1.f - (dist/interactionRadius);
		//float pressure = amplitude * exp(-dist / interactionRadius);
		
		pressureVec += vec4(pressure * normalize(dirVec), 0.f);
		// pressureVec += vec4(dirVec, 0.f);
		
		pressureVec.w += pressure;
		
		//break;
	}
	
	return pressureVec;
}

mat2x3 applyViscosity(uint index, vec3 velocity)
{
	mat2x3 result;

	vec3 vel = velocity;
	vec3 pos = positionBuffer[index].xyz;
	float alpha = 1.f;
	float beta = 1.f;

	for (int i = 0; i < numberOfParticles; i++)
	{
		if (index == i)
			continue;

		vec3 dirVec = pos - positionBuffer[i].xyz;
		float dist = length(dirVec);

		//if (dist > interactionRadius * 1.0f || dist < 0.01f)
		if (dist > interactionRadius * 1.0f)
			continue;

		vec3 dirVecN = normalize(dirVec);
		float moveDir = dot(vel - velocityBuffer[i].xyz, dirVecN);

		if (moveDir > 0)
		{
			vec3 impulse = (1.f - (dist / interactionRadius)) * (alpha * moveDir + beta * moveDir * moveDir) * dirVecN * dt;
			vel -= impulse * 0.5f;
			velocityBuffer[i].xyz += impulse * 0.5f;
		}
	}

	result[0] = pos;
	result[1] = vel;

	return result;
}
